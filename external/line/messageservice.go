// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package line

import (
	"bytes"
	"fmt"

	"github.com/bcgraham/tsumtsum/external/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type MessageService interface {
	// Parameters:
	//  - LocalRevision
	//  - LastOpTimestamp
	//  - Count
	FetchMessageOperations(localRevision int64, lastOpTimestamp int64, count int32) (r *MessageOperations, err error)
	// Parameters:
	//  - ChatId
	GetLastReadMessageIds(chatId string) (r *LastReadMessageIds, err error)
	// Parameters:
	//  - ChatIds
	MultiGetLastReadMessageIds(chatIds []string) (r []*LastReadMessageIds, err error)
}

type MessageServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewMessageServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MessageServiceClient {
	return &MessageServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewMessageServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MessageServiceClient {
	return &MessageServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - LocalRevision
//  - LastOpTimestamp
//  - Count
func (p *MessageServiceClient) FetchMessageOperations(localRevision int64, lastOpTimestamp int64, count int32) (r *MessageOperations, err error) {
	if err = p.sendFetchMessageOperations(localRevision, lastOpTimestamp, count); err != nil {
		return
	}
	return p.recvFetchMessageOperations()
}

func (p *MessageServiceClient) sendFetchMessageOperations(localRevision int64, lastOpTimestamp int64, count int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("fetchMessageOperations", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FetchMessageOperationsArgs{
		LocalRevision:   localRevision,
		LastOpTimestamp: lastOpTimestamp,
		Count:           count,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MessageServiceClient) recvFetchMessageOperations() (value *MessageOperations, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error736 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error737 error
		error737, err = error736.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error737
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "fetchMessageOperations failed: out of sequence response")
		return
	}
	result := FetchMessageOperationsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ChatId
func (p *MessageServiceClient) GetLastReadMessageIds(chatId string) (r *LastReadMessageIds, err error) {
	if err = p.sendGetLastReadMessageIds(chatId); err != nil {
		return
	}
	return p.recvGetLastReadMessageIds()
}

func (p *MessageServiceClient) sendGetLastReadMessageIds(chatId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getLastReadMessageIds", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetLastReadMessageIdsArgs{
		ChatId: chatId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MessageServiceClient) recvGetLastReadMessageIds() (value *LastReadMessageIds, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error738 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error739 error
		error739, err = error738.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error739
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getLastReadMessageIds failed: out of sequence response")
		return
	}
	result := GetLastReadMessageIdsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ChatIds
func (p *MessageServiceClient) MultiGetLastReadMessageIds(chatIds []string) (r []*LastReadMessageIds, err error) {
	if err = p.sendMultiGetLastReadMessageIds(chatIds); err != nil {
		return
	}
	return p.recvMultiGetLastReadMessageIds()
}

func (p *MessageServiceClient) sendMultiGetLastReadMessageIds(chatIds []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("multiGetLastReadMessageIds", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MultiGetLastReadMessageIdsArgs{
		ChatIds: chatIds,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MessageServiceClient) recvMultiGetLastReadMessageIds() (value []*LastReadMessageIds, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error740 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error741 error
		error741, err = error740.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error741
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "multiGetLastReadMessageIds failed: out of sequence response")
		return
	}
	result := MultiGetLastReadMessageIdsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

type MessageServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      MessageService
}

func (p *MessageServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *MessageServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *MessageServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewMessageServiceProcessor(handler MessageService) *MessageServiceProcessor {

	self742 := &MessageServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self742.processorMap["fetchMessageOperations"] = &messageServiceProcessorFetchMessageOperations{handler: handler}
	self742.processorMap["getLastReadMessageIds"] = &messageServiceProcessorGetLastReadMessageIds{handler: handler}
	self742.processorMap["multiGetLastReadMessageIds"] = &messageServiceProcessorMultiGetLastReadMessageIds{handler: handler}
	return self742
}

func (p *MessageServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x743 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x743.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x743

}

type messageServiceProcessorFetchMessageOperations struct {
	handler MessageService
}

func (p *messageServiceProcessorFetchMessageOperations) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FetchMessageOperationsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("fetchMessageOperations", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FetchMessageOperationsResult{}
	var retval *MessageOperations
	var err2 error
	if retval, err2 = p.handler.FetchMessageOperations(args.LocalRevision, args.LastOpTimestamp, args.Count); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchMessageOperations: "+err2.Error())
			oprot.WriteMessageBegin("fetchMessageOperations", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("fetchMessageOperations", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type messageServiceProcessorGetLastReadMessageIds struct {
	handler MessageService
}

func (p *messageServiceProcessorGetLastReadMessageIds) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetLastReadMessageIdsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getLastReadMessageIds", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetLastReadMessageIdsResult{}
	var retval *LastReadMessageIds
	var err2 error
	if retval, err2 = p.handler.GetLastReadMessageIds(args.ChatId); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLastReadMessageIds: "+err2.Error())
			oprot.WriteMessageBegin("getLastReadMessageIds", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getLastReadMessageIds", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type messageServiceProcessorMultiGetLastReadMessageIds struct {
	handler MessageService
}

func (p *messageServiceProcessorMultiGetLastReadMessageIds) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MultiGetLastReadMessageIdsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("multiGetLastReadMessageIds", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MultiGetLastReadMessageIdsResult{}
	var retval []*LastReadMessageIds
	var err2 error
	if retval, err2 = p.handler.MultiGetLastReadMessageIds(args.ChatIds); err2 != nil {
		switch v := err2.(type) {
		case *TalkException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing multiGetLastReadMessageIds: "+err2.Error())
			oprot.WriteMessageBegin("multiGetLastReadMessageIds", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("multiGetLastReadMessageIds", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type FetchMessageOperationsArgs struct {
	// unused field # 1
	LocalRevision   int64 `thrift:"localRevision,2" json:"localRevision"`
	LastOpTimestamp int64 `thrift:"lastOpTimestamp,3" json:"lastOpTimestamp"`
	Count           int32 `thrift:"count,4" json:"count"`
}

func NewFetchMessageOperationsArgs() *FetchMessageOperationsArgs {
	return &FetchMessageOperationsArgs{}
}

func (p *FetchMessageOperationsArgs) GetLocalRevision() int64 {
	return p.LocalRevision
}

func (p *FetchMessageOperationsArgs) GetLastOpTimestamp() int64 {
	return p.LastOpTimestamp
}

func (p *FetchMessageOperationsArgs) GetCount() int32 {
	return p.Count
}
func (p *FetchMessageOperationsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FetchMessageOperationsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.LocalRevision = v
	}
	return nil
}

func (p *FetchMessageOperationsArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.LastOpTimestamp = v
	}
	return nil
}

func (p *FetchMessageOperationsArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *FetchMessageOperationsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("fetchMessageOperations_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FetchMessageOperationsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("localRevision", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:localRevision: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.LocalRevision)); err != nil {
		return fmt.Errorf("%T.localRevision (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:localRevision: %s", p, err)
	}
	return err
}

func (p *FetchMessageOperationsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastOpTimestamp", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:lastOpTimestamp: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.LastOpTimestamp)); err != nil {
		return fmt.Errorf("%T.lastOpTimestamp (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:lastOpTimestamp: %s", p, err)
	}
	return err
}

func (p *FetchMessageOperationsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:count: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return fmt.Errorf("%T.count (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:count: %s", p, err)
	}
	return err
}

func (p *FetchMessageOperationsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FetchMessageOperationsArgs(%+v)", *p)
}

type FetchMessageOperationsResult struct {
	Success *MessageOperations `thrift:"success,0" json:"success"`
	E       *TalkException     `thrift:"e,1" json:"e"`
}

func NewFetchMessageOperationsResult() *FetchMessageOperationsResult {
	return &FetchMessageOperationsResult{}
}

var FetchMessageOperationsResult_Success_DEFAULT *MessageOperations

func (p *FetchMessageOperationsResult) GetSuccess() *MessageOperations {
	if !p.IsSetSuccess() {
		return FetchMessageOperationsResult_Success_DEFAULT
	}
	return p.Success
}

var FetchMessageOperationsResult_E_DEFAULT *TalkException

func (p *FetchMessageOperationsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return FetchMessageOperationsResult_E_DEFAULT
	}
	return p.E
}
func (p *FetchMessageOperationsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FetchMessageOperationsResult) IsSetE() bool {
	return p.E != nil
}

func (p *FetchMessageOperationsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FetchMessageOperationsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &MessageOperations{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *FetchMessageOperationsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *FetchMessageOperationsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("fetchMessageOperations_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FetchMessageOperationsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FetchMessageOperationsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *FetchMessageOperationsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FetchMessageOperationsResult(%+v)", *p)
}

type GetLastReadMessageIdsArgs struct {
	// unused field # 1
	ChatId string `thrift:"chatId,2" json:"chatId"`
}

func NewGetLastReadMessageIdsArgs() *GetLastReadMessageIdsArgs {
	return &GetLastReadMessageIdsArgs{}
}

func (p *GetLastReadMessageIdsArgs) GetChatId() string {
	return p.ChatId
}
func (p *GetLastReadMessageIdsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetLastReadMessageIdsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ChatId = v
	}
	return nil
}

func (p *GetLastReadMessageIdsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLastReadMessageIds_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetLastReadMessageIdsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chatId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:chatId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ChatId)); err != nil {
		return fmt.Errorf("%T.chatId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:chatId: %s", p, err)
	}
	return err
}

func (p *GetLastReadMessageIdsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLastReadMessageIdsArgs(%+v)", *p)
}

type GetLastReadMessageIdsResult struct {
	Success *LastReadMessageIds `thrift:"success,0" json:"success"`
	E       *TalkException      `thrift:"e,1" json:"e"`
}

func NewGetLastReadMessageIdsResult() *GetLastReadMessageIdsResult {
	return &GetLastReadMessageIdsResult{}
}

var GetLastReadMessageIdsResult_Success_DEFAULT *LastReadMessageIds

func (p *GetLastReadMessageIdsResult) GetSuccess() *LastReadMessageIds {
	if !p.IsSetSuccess() {
		return GetLastReadMessageIdsResult_Success_DEFAULT
	}
	return p.Success
}

var GetLastReadMessageIdsResult_E_DEFAULT *TalkException

func (p *GetLastReadMessageIdsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return GetLastReadMessageIdsResult_E_DEFAULT
	}
	return p.E
}
func (p *GetLastReadMessageIdsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetLastReadMessageIdsResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetLastReadMessageIdsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetLastReadMessageIdsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &LastReadMessageIds{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetLastReadMessageIdsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetLastReadMessageIdsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLastReadMessageIds_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetLastReadMessageIdsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetLastReadMessageIdsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetLastReadMessageIdsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLastReadMessageIdsResult(%+v)", *p)
}

type MultiGetLastReadMessageIdsArgs struct {
	// unused field # 1
	ChatIds []string `thrift:"chatIds,2" json:"chatIds"`
}

func NewMultiGetLastReadMessageIdsArgs() *MultiGetLastReadMessageIdsArgs {
	return &MultiGetLastReadMessageIdsArgs{}
}

func (p *MultiGetLastReadMessageIdsArgs) GetChatIds() []string {
	return p.ChatIds
}
func (p *MultiGetLastReadMessageIdsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MultiGetLastReadMessageIdsArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.ChatIds = tSlice
	for i := 0; i < size; i++ {
		var _elem744 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem744 = v
		}
		p.ChatIds = append(p.ChatIds, _elem744)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *MultiGetLastReadMessageIdsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("multiGetLastReadMessageIds_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MultiGetLastReadMessageIdsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chatIds", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:chatIds: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ChatIds)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.ChatIds {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:chatIds: %s", p, err)
	}
	return err
}

func (p *MultiGetLastReadMessageIdsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MultiGetLastReadMessageIdsArgs(%+v)", *p)
}

type MultiGetLastReadMessageIdsResult struct {
	Success []*LastReadMessageIds `thrift:"success,0" json:"success"`
	E       *TalkException        `thrift:"e,1" json:"e"`
}

func NewMultiGetLastReadMessageIdsResult() *MultiGetLastReadMessageIdsResult {
	return &MultiGetLastReadMessageIdsResult{}
}

var MultiGetLastReadMessageIdsResult_Success_DEFAULT []*LastReadMessageIds

func (p *MultiGetLastReadMessageIdsResult) GetSuccess() []*LastReadMessageIds {
	return p.Success
}

var MultiGetLastReadMessageIdsResult_E_DEFAULT *TalkException

func (p *MultiGetLastReadMessageIdsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return MultiGetLastReadMessageIdsResult_E_DEFAULT
	}
	return p.E
}
func (p *MultiGetLastReadMessageIdsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MultiGetLastReadMessageIdsResult) IsSetE() bool {
	return p.E != nil
}

func (p *MultiGetLastReadMessageIdsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MultiGetLastReadMessageIdsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*LastReadMessageIds, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem745 := &LastReadMessageIds{}
		if err := _elem745.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem745, err)
		}
		p.Success = append(p.Success, _elem745)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *MultiGetLastReadMessageIdsResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *MultiGetLastReadMessageIdsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("multiGetLastReadMessageIds_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MultiGetLastReadMessageIdsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *MultiGetLastReadMessageIdsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *MultiGetLastReadMessageIdsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MultiGetLastReadMessageIdsResult(%+v)", *p)
}
